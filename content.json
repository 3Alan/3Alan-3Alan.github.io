{"meta":{"title":"Alan|前端博客","subtitle":"","description":"一个专注于前端开发的小白，分享前端开发知识","author":"Alan","url":"https://alanwang.site","root":"/"},"pages":[{"title":"404 Not Found","date":"2020-05-13T09:03:12.444Z","updated":"2020-05-13T09:03:12.444Z","comments":true,"path":"404.html","permalink":"https://alanwang.site/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"关于我","date":"2020-05-14T12:42:42.500Z","updated":"2020-05-14T12:42:42.500Z","comments":true,"path":"about/index.html","permalink":"https://alanwang.site/about/index.html","excerpt":"","text":"Alan 待完善"},{"title":"所有分类","date":"2020-05-14T12:46:25.030Z","updated":"2020-05-14T12:46:25.030Z","comments":true,"path":"categories/index.html","permalink":"https://alanwang.site/categories/index.html","excerpt":"","text":""},{"title":"我的朋友们","date":"2020-05-14T13:25:42.778Z","updated":"2020-05-14T13:25:42.778Z","comments":true,"path":"friends/index.html","permalink":"https://alanwang.site/friends/index.html","excerpt":"","text":"要添加友链的朋友按照下面格式给我留言😘 12345678items:- name: # 博客名 必填 avatar: # 头像链接 必填 url: # 博客链接 必填 backgroundColor: &#39;#3E74C9&#39; # 卡片背景颜色 textColor: &#39;#fff&#39; # 卡片文字颜色 tags: [标签1, 标签2] # 标签 desc: 描述文字"},{"title":"","date":"2020-05-14T13:02:13.019Z","updated":"2020-05-14T13:02:13.019Z","comments":true,"path":"list/index.html","permalink":"https://alanwang.site/list/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2020-05-14T12:58:35.975Z","updated":"2020-05-14T12:58:35.975Z","comments":true,"path":"tags/index.html","permalink":"https://alanwang.site/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"webpack4.0学习总结（一）","slug":"webpack学习总结（一）","date":"2020-05-14T08:01:46.000Z","updated":"2020-05-14T08:01:46.000Z","comments":true,"path":"2020/05/14/webpack学习总结（一）/","link":"","permalink":"https://alanwang.site/2020/05/14/webpack%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89/","excerpt":"这一篇文章主要简单介绍了webpack是什么以及webpack的一些简单配置，你只要跟着我敲完这些代码后一定会对webpack有一个基本的了解的。😎","text":"这一篇文章主要简单介绍了webpack是什么以及webpack的一些简单配置，你只要跟着我敲完这些代码后一定会对webpack有一个基本的了解的。😎 webpack是一个模块打包器 本质上，webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle。 上面引用了webpack官网的一段介绍，我们可以简单的理解webpack是一个模块打包器，那什么是模块打包器呢？😂先看一个简单的例子 index.htmlindex.jscomponentA.jscomponentB.js123456789101112&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"root\"&gt;&lt;/div&gt; &lt;script src=\"./index.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;12345678910// ES Moudule 模块化引入import ComponentB from './componentB';var root = document.getElementById('root');// CommonJs 模块引入var ComponentA = require('./componentA');new ComponentA();new ComponentB();1234567function ComponentA() &#123; var componentA = document.createElement('div'); componentA.innerHTML = 'ComponentA'; root.append(componentA);&#125;module.exports = ComponentA;1234567function ComponentB() &#123; var componentB = document.createElement('div'); componentB.innerHTML = 'ComponentB'; root.append(componentB);&#125;export default ComponentB; 这里的模块可以理解成componentA和componentB，这种写法在vue和react中非常常见，写完这些文件后打开index.html文件，浏览器是会报错的。 Uncaught SyntaxError: Cannot use import statement outside a module 这是由于这里使用了es6中的模板引入的方式，浏览器是识别不了这种方式的，那怎么办呢？😥 这个时候webpack就派上用场了，首先初始化该项目 1npm init -y 初始化后会生成package.json文件 安装webpack-cli和webpack（不建议全局安装） 12npm install webpack-cli -Dnpm install webpack -S 安装固定版本的webpack 12npm install webpack@版本号npm info webpack &#x2F;&#x2F; 查看包信息 打包index.js 1npx webpack index.js 这里如果不使用npx的话node会默认在全局环境中找寻webpack，加上npx的话就会使用项目中安装的webpack来执行命令 打包后可以看到根目录下多了一个dist文件夹（webpack默认设置好的，后面会讲如何改变），里面有一个main.js文件，这个文件就是经过webpack处理后的index.js。 然后我们修改一下index.html的代码 1&lt;script src=\"./dist/main.js\"&gt;&lt;/script&gt; 这下浏览器就能正常识别html中的js文件了，到这里为止理解webpack是一个模块打包器应该不是很难了吧。webpack将模块componentA和componentB打包生成了最后的main.js。 webpack配置文件webpack的配置文件名默认是webpack.config.js，当然我们也可以指定配置文件。 开始之前我们先修改一下项目目录 webpacktest ├── index.html ├── package-lock.json ├── package.json ├── src │ ├── componentA.js │ ├── componentB.js │ └── index.js └── webpack.config.js 在项目根目录下新建配置文件webpack.config.js： 123456789101112const path = require('path');module.exports = &#123; mode: 'development', // 默认为production entry: &#123; main: './src/index.js' // 打包入口文件 &#125;, output: &#123; // 输出文件配置 filename: 'bundle.js', path: path.resolve(__dirname, 'dist') &#125;&#125; 上面引用的path是node中的一个模块，__dirname表示webpack.config.js所在的目录。 entry可以简写为entry: ‘./src/index.js’ mode中的development和production有什么区别呢 我们看一下打包出来的文件bundle.js就知道了，production模式下的代码是一整行的，体积更小。而development模式下的代码不是一整行的有利于调试。 node path的 更多 执行下面命令后即可完成打包，效果和上一节一样 1npx webpack 当然也可以使用自定义配置文件 1npx webpack --config 自定义配置文件 写过项目的小伙伴应该都发现平时都是使用npm run xxx来打包项目的，下面就来介绍一下如何配置 修改package.json文件中的script 123\"scripts\": &#123; \"build\": \"webpack\"&#125;, 这样就可以通过npm run build来进行打包了，不过看过第一节的小伙伴肯定有疑问了，这样配置会不会使用全局的webpack去进行打包呢🙄，其实并不会，这里npm script命令会在项目的node_modules文件中去寻找webpack并执行。 打包好后我们打开index.html看看，发现是会报错的，这里注意：我们要手动把index.html移动到dist目录下并修改一下js路径，因为webpack并没有将index.html打包到dist目录下。 1&lt;script src=\"./bundle.js\"&gt;&lt;/script&gt; 这下再运行index.html就没有任何问题了。🎉 文章是看过慕课网的课程后进行的总结课程链接","categories":[{"name":"前端","slug":"前端","permalink":"https://alanwang.site/categories/%E5%89%8D%E7%AB%AF/"},{"name":"webpack4.0学习总结","slug":"前端/webpack4-0学习总结","permalink":"https://alanwang.site/categories/%E5%89%8D%E7%AB%AF/webpack4-0%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"}],"tags":[{"name":"webpack4.0","slug":"webpack4-0","permalink":"https://alanwang.site/tags/webpack4-0/"}]},{"title":"react博客-egg-jwt实现登录系统","slug":"react博客-egg-jwt实现登录系统","date":"2020-05-13T08:11:11.000Z","updated":"2020-05-13T08:11:11.000Z","comments":true,"path":"2020/05/13/react博客-egg-jwt实现登录系统/","link":"","permalink":"https://alanwang.site/2020/05/13/react%E5%8D%9A%E5%AE%A2-egg-jwt%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E7%B3%BB%E7%BB%9F/","excerpt":"react博客系列文章","text":"react博客系列文章 何为jwtegg-jwt安装egg-jwtyarn add egg-jwt 配置egg-jwt 配置config/plugin.js文件 1234exports.jwt = &#123; enable: true, package: 'egg-jwt',&#125;; 配置config/config.default.js文件 1234// 自己设定的密钥，用于对信息进行签名config.jwt = &#123; secret: 'xxxxxx',&#125;; 实例后台实现登录操作返回token 路由层 在第二个参数上加上jwt即可实现对该路由的鉴权 下面的jwt是自定义的中间件auth.js，该文件在下一部分介绍 12345678910111213'use strict';/** * @param &#123;Egg.Application&#125; app - egg application */module.exports = app =&gt; &#123; const &#123; router, controller, middleware, config &#125; = app; const &#123; admin &#125; = controller.admin; const jwt = middleware.auth(config.jwt); router.post('/admin/login', admin.login); // 需要鉴权的路由再第二个参数上加上jwt router.get('/admin/get_type_list', jwt, admin.getTypeList);&#125;; controller层 使用jwt.sign(加密数据, 密钥, [options, callback]) 来生成token 相关配置可以查看jsonwebtoken 12345678910111213141516171819async login() &#123; const &#123; app, ctx &#125; = this; const &#123; username, password &#125; = ctx.request.body; const checkValidate = await ctx.service.admin.admin.checkUserValidate(username, password); if (checkValidate) &#123; // 将信息使用jwt进行签名加密生成token，expiresIn（token有效时间） const token = app.jwt.sign(&#123; username, password &#125;, app.config.jwt.secret, &#123; expiresIn: '2h' &#125;); ctx.body = &#123; code: '0001', msg: '登录成功', token, &#125;; &#125; else &#123; ctx.body = &#123; code: '0002', msg: '用户名或者密码错误，请重试！', &#125;; &#125;&#125; service层 1234async checkUserValidate(username, password) &#123; const isValidate = await this.app.mysql.get('admin', &#123; username, password &#125;); return !!isValidate;&#125; 使用postman进行测试 将生成的token返回给前台后使用localStorage.setItem把token保存到本地 前台传递token进行鉴权封装axios新建axios文件对axio进行封装，通过axios的拦截器来实现每次请求时自动在headers上携带token数据到后台，后台使用jwt.verify来检验token的正确性 axios.js 12345678910111213141516171819import axios from 'axios';axios.interceptors.request.use(config =&gt; &#123; // 登录成功后保存在本地的token const token = localStorage.getItem('token'); config.headers.Authorization = `Bearer $&#123;token&#125;`; return config;&#125;);axios.interceptors.response.use(response =&gt; &#123; // code是后台接口设置的 const &#123; code &#125; = response.data; if (code === '0003' || code === '0004') &#123; window.location.href = '/login'; &#125; return response;&#125;);export default axios; 封装好后，之后都使用该封装好后的axios进行请求。 后台校验处理auth.js 1234567891011121314151617181920212223242526272829303132'use strict';module.exports = options =&gt; &#123; return async function auth(ctx, next) &#123; // 获取前台通过axios封装后穿过来的token const token = ctx.header.authorization; if (token) &#123; try &#123; // 验证并对token进行解码 const decode = ctx.app.jwt.verify(token.split(' ')[1], options.secret); console.log(decode); await next(); &#125; catch (error) &#123; console.log(error.name); if (error.name === 'JsonWebTokenError' || error.name === 'TokenExpiredError') &#123; // 这里的错误有许多种情况：1.token错误，2.token过期... 这里统一处理为鉴权失败 ctx.body = &#123; code: '0003', msg: '用户鉴权失败，请重新登录', &#125;; &#125; else &#123; throw error; &#125; &#125; &#125; else &#123; ctx.body = &#123; code: '0004', msg: '您没有登录，请先登录', &#125;; &#125; &#125;;&#125;; 后台通过/middleware/auth.js中间件来实现给需要鉴权的接口进行鉴权，通过对前台传过来的token数据进行验证jwt.verify来识别登录状态。对JsonWebTokenError错误统一处理，应为auth.js作为中间件，所以接口中出现的其他错误也会在这里被catch到，对于不是JsonWebTokenError的错误，直接把错误抛出去。","categories":[{"name":"前端","slug":"前端","permalink":"https://alanwang.site/categories/%E5%89%8D%E7%AB%AF/"},{"name":"React","slug":"前端/React","permalink":"https://alanwang.site/categories/%E5%89%8D%E7%AB%AF/React/"}],"tags":[{"name":"博客","slug":"博客","permalink":"https://alanwang.site/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"React","slug":"React","permalink":"https://alanwang.site/tags/React/"},{"name":"ReactHook","slug":"ReactHook","permalink":"https://alanwang.site/tags/ReactHook/"},{"name":"jwt","slug":"jwt","permalink":"https://alanwang.site/tags/jwt/"}]},{"title":"react博客-项目部署","slug":"react博客-项目部署","date":"2020-05-13T07:51:16.000Z","updated":"2020-05-13T07:51:16.000Z","comments":true,"path":"2020/05/13/react博客-项目部署/","link":"","permalink":"https://alanwang.site/2020/05/13/react%E5%8D%9A%E5%AE%A2-%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/","excerpt":"阿里云最近推出了一个“在家实践活动”，免费领取半年的服务器，真香。领取地址","text":"阿里云最近推出了一个“在家实践活动”，免费领取半年的服务器，真香。领取地址 购买阿里云服务器购买完成后会得到一个公网ip 下载软件putty来连接我们刚才购买的服务器，只需输入公网ip点击open即可 在命令行中输入用户名root和密码得到Welcome to Alibaba Cloud Elastic Compute Service !即完成了连接。 使用宝塔进行管理https://www.bt.cn/bbs/thread-19376-1-1.html 连接成功服务器后在命令行输入(Centos系统，其他系统查看上面网址)，复制按下鼠标右键完成宝塔的安装 1yum install -y wget &amp;&amp; wget -O install.sh http:&#x2F;&#x2F;download.bt.cn&#x2F;install&#x2F;install_6.0.sh &amp;&amp; sh install.sh 安装成功后会返回一个端口号为8888的网站以及账号和密码： 访问该地址，这个时候网站时不能访问的，因为远程服务器没有开放8888端口。 设置教程： https://www.bt.cn/bbs/thread-2897-1-1.html 登录成功后安装mysql和nginx（之后几乎所有的操作都在宝塔上进行） 需要安装软件 php环境（用于phpmyadmin） phpMyAdmin（用于管理mysql数据库） PM2（自带node环境） nginx 开放80(http)端口访问服务器在阿里云服务器管理控制台安全组中设置 设置后就可以通过公网ip访问服务器了 部署项目切换镜像源安装nrm（用来管理npm镜像源的工具）npm install -g nrm 常用命令 nrm ls 查看所有源地址 nrm use taobao 切换为淘宝镜像源 nrm add [name] [url] 添加源地址 通过git克隆代码到服务器把代码clone到服务器 打包项目并且部署 部署前台页面（next.js） yarn build yarn start 或者用PM2进行进程守护（待研究） 部署后台接口（egg.js） npm start 部署后台管理系统 直接npm build然后使用nginx进行代理 导入mysql数据出错在导入本地mysql文件时遇到了一些错误，参考文章： https://www.jianshu.com/p/788dceb93eff Linux查看端口号占用情况以及杀进程命令 netstart -anp（查看端口占用情况） lsof -i:8080（查看8080端口占用情况） kill -9 1234（杀PID=1234进程）","categories":[{"name":"前端","slug":"前端","permalink":"https://alanwang.site/categories/%E5%89%8D%E7%AB%AF/"},{"name":"React","slug":"前端/React","permalink":"https://alanwang.site/categories/%E5%89%8D%E7%AB%AF/React/"}],"tags":[{"name":"博客","slug":"博客","permalink":"https://alanwang.site/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"React","slug":"React","permalink":"https://alanwang.site/tags/React/"},{"name":"部署","slug":"部署","permalink":"https://alanwang.site/tags/%E9%83%A8%E7%BD%B2/"},{"name":"阿里云","slug":"阿里云","permalink":"https://alanwang.site/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"}]},{"title":"测试主题","slug":"test1","date":"2020-05-13T01:19:17.000Z","updated":"2020-05-13T07:19:17.000Z","comments":true,"path":"2020/05/13/test1/","link":"","permalink":"https://alanwang.site/2020/05/13/test1/","excerpt":"这里是摘要","text":"这里是摘要 这里是正文 123456789101112131415161718192021222324252627title: 测试主题date: 2020-05-13 09:19:17top: truecategories: 测试分类tags: 测试标签author: name: 测试作者 avatar: https:&#x2F;&#x2F;gitee.com&#x2F;alannum3&#x2F;MyImages&#x2F;raw&#x2F;master&#x2F;img&#x2F;20200508165134.pngmusic:# 文章音乐 server: netease # netease, tencent, kugou, xiami, baidu type: song # song, playlist, album, search, artist id: 16846091 thumbnail:# 文章缩略图https:&#x2F;&#x2F;gitee.com&#x2F;alannum3&#x2F;MyImages&#x2F;raw&#x2F;master&#x2F;img&#x2F;20200508165134.png# 归档页面对应文章图标icons: [fas fa-fire red, fas fa-star green]meta:# 文章底部按钮 footer: [btns]btns: repo: https:&#x2F;&#x2F;github.com&#x2F;xaoxuu&#x2F;hexo-theme-volantis bug: https:&#x2F;&#x2F;github.com&#x2F;xaoxuu&#x2F;hexo-theme-volantis&#x2F;issues&#x2F; doubt: https:&#x2F;&#x2F;github.com&#x2F;xaoxuu&#x2F;hexo-theme-volantis&#x2F;issues&#x2F; idea: https:&#x2F;&#x2F;github.com&#x2F;xaoxuu&#x2F;hexo-theme-volantis&#x2F;issues&#x2F;cover: false #是否显示封面图 h1h2h31代码块 tab1tab2这里面写内容，支持的语法格式有限，请尽量不要写太过复杂的东西。","categories":[{"name":"测试分类","slug":"测试分类","permalink":"https://alanwang.site/categories/%E6%B5%8B%E8%AF%95%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"测试标签","slug":"测试标签","permalink":"https://alanwang.site/tags/%E6%B5%8B%E8%AF%95%E6%A0%87%E7%AD%BE/"}],"author":{"name":"测试作者","avatar":"https://gitee.com/alannum3/MyImages/raw/master/img/20200508165134.png"}},{"title":"Typora+PicGo+Gitee（书写博客神器）","slug":"Typora-PicGo-Gitee（书写博客神器）","date":"2020-05-12T13:06:52.000Z","updated":"2020-05-13T07:19:17.000Z","comments":true,"path":"2020/05/12/Typora-PicGo-Gitee（书写博客神器）/","link":"","permalink":"https://alanwang.site/2020/05/12/Typora-PicGo-Gitee%EF%BC%88%E4%B9%A6%E5%86%99%E5%8D%9A%E5%AE%A2%E7%A5%9E%E5%99%A8%EF%BC%89/","excerpt":"写博客，难免会随手截图来解释博客中的一些知识点或者内容。当高高兴兴地在本地电脑写完博客后将它上传之后发现所有图片都浏览不了了，这其实就是因为图片都保存在本地了。为了解决这个问题，从长远和财力来考虑，我使用了gitee搭配开源项目PicGo来做图床生成在线图片链接，这样无论在哪都能畅通查看图片了。而不使用github主要是国内访问速度是非常地慢。","text":"写博客，难免会随手截图来解释博客中的一些知识点或者内容。当高高兴兴地在本地电脑写完博客后将它上传之后发现所有图片都浏览不了了，这其实就是因为图片都保存在本地了。为了解决这个问题，从长远和财力来考虑，我使用了gitee搭配开源项目PicGo来做图床生成在线图片链接，这样无论在哪都能畅通查看图片了。而不使用github主要是国内访问速度是非常地慢。 参考文章：https://blog.csdn.net/disILLL/article/details/104944710 开搞软件版本 typora 0.9.86 PicGo 2.2.2 创建gitee仓库在gitee账户中创建一个公开的仓库用来保存图片 PicGo配置 安装gitee-uploader插件 安装完后配置gitee token在自己的gitee中创建 点击commit生成token，将token填入PicGo中点击确定即可。 配置Typora实现插入图片自动上传新版本的Typora已经支持图片上传功能，具体配置如下（文件-&gt;偏好设置）： 测试可以看到这里图片的链接是之前在gitee中创建的用来保存图片的Repository的地址了 哈哈，成功了，这样效率就提高了许多了。","categories":[{"name":"效率工具","slug":"效率工具","permalink":"https://alanwang.site/categories/%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"Typora","slug":"Typora","permalink":"https://alanwang.site/tags/Typora/"},{"name":"博客","slug":"博客","permalink":"https://alanwang.site/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"工具","slug":"工具","permalink":"https://alanwang.site/tags/%E5%B7%A5%E5%85%B7/"}]}],"categories":[{"name":"前端","slug":"前端","permalink":"https://alanwang.site/categories/%E5%89%8D%E7%AB%AF/"},{"name":"webpack4.0学习总结","slug":"前端/webpack4-0学习总结","permalink":"https://alanwang.site/categories/%E5%89%8D%E7%AB%AF/webpack4-0%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"},{"name":"React","slug":"前端/React","permalink":"https://alanwang.site/categories/%E5%89%8D%E7%AB%AF/React/"},{"name":"测试分类","slug":"测试分类","permalink":"https://alanwang.site/categories/%E6%B5%8B%E8%AF%95%E5%88%86%E7%B1%BB/"},{"name":"效率工具","slug":"效率工具","permalink":"https://alanwang.site/categories/%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"webpack4.0","slug":"webpack4-0","permalink":"https://alanwang.site/tags/webpack4-0/"},{"name":"博客","slug":"博客","permalink":"https://alanwang.site/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"React","slug":"React","permalink":"https://alanwang.site/tags/React/"},{"name":"ReactHook","slug":"ReactHook","permalink":"https://alanwang.site/tags/ReactHook/"},{"name":"jwt","slug":"jwt","permalink":"https://alanwang.site/tags/jwt/"},{"name":"部署","slug":"部署","permalink":"https://alanwang.site/tags/%E9%83%A8%E7%BD%B2/"},{"name":"阿里云","slug":"阿里云","permalink":"https://alanwang.site/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"},{"name":"测试标签","slug":"测试标签","permalink":"https://alanwang.site/tags/%E6%B5%8B%E8%AF%95%E6%A0%87%E7%AD%BE/"},{"name":"Typora","slug":"Typora","permalink":"https://alanwang.site/tags/Typora/"},{"name":"工具","slug":"工具","permalink":"https://alanwang.site/tags/%E5%B7%A5%E5%85%B7/"}]}