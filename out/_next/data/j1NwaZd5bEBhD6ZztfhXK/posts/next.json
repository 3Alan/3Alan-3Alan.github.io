{"pageProps":{"post":{"title":"Next.js学习笔记","date":"2020-03-16T05:35:07.322Z","slug":"next","content":"<p>这段时间工作要求将之前的vue的H5活动页面转移到Next.js下面，经过一段时间的研究，总结出了下面的内容。</p>\n<!-- more -->\n<h2>什么是Next.js</h2>\n<p>基于<code>React</code>的SSR（服务端渲染框架）</p>\n<h2>SSR &#x26; CSR</h2>\n<blockquote>\n<p>参考链接：<a href=\"https://medium.com/walmartglobaltech/the-benefits-of-server-side-rendering-over-client-side-rendering-5d07ff2cefe8\">https://medium.com/walmartglobaltech/the-benefits-of-server-side-rendering-over-client-side-rendering-5d07ff2cefe8</a></p>\n</blockquote>\n<img src=\"https://i2.wp.com/blog.logrocket.com/wp-content/uploads/2019/06/ssr-explanation.png?w=800&ssl=1\"  />\n<blockquote>\n<p>The main difference is that for SSR your server’s response to the browser is the HTML of your page that is ready to be rendered, while for CSR the browser gets a pretty empty document with links to your javascript. That means your browser will start rendering the HTML from your server without having to wait for all the JavaScript to be downloaded and executed. In both cases, React will need to be downloaded and go through the same process of building a virtual dom and attaching events to make the page interactive — but for SSR, the user can start viewing the page while all of that is happening. For the CSR world, you need to wait for all of the above to happen and then have the virtual dom moved to the browser dom for the page to be viewable.</p>\n</blockquote>\n<img src=\"https://i2.wp.com/blog.logrocket.com/wp-content/uploads/2019/06/csr-explanation.png?w=800&ssl=1\"  />\n<h2>Next.js的优点</h2>\n<ul>\n<li>更好的SEO</li>\n<li>更快的首屏渲染速度</li>\n</ul>\n<h2>Next.js 基础(与Rect开发的不同之处)</h2>\n<blockquote>\n<p><a href=\"https://www.nextjs.cn/learn/basics/create-nextjs-app?utm_source=next-site&#x26;utm_medium=nav-cta&#x26;utm_campaign=next-website\">https://www.nextjs.cn/learn/basics/create-nextjs-app?utm_source=next-site&#x26;utm_medium=nav-cta&#x26;utm_campaign=next-website</a></p>\n</blockquote>\n<h3>路由映射</h3>\n<blockquote>\n<p>在 Next.js 中，一个 <strong>page（页面）</strong> 就是一个从 <code>.js</code>、<code>jsx</code>、<code>.ts</code> 或 <code>.tsx</code> 文件导出（export）的 <a href=\"https://reactjs.org/docs/components-and-props.html\">React 组件</a> ，这些文件存放在 <code>pages</code> 目录下。每个 page（页面）都使用其文件名作为路由（route）。</p>\n</blockquote>\n<pre><code class=\"hljs language-js\">pages/about.js/jsx/ts/tsx → /about\n\npages/dashboard/settings/username.js → /dashboard/settings/username</code></pre>\n<h3>自带路由：<code>next/router</code> <code>next/link</code></h3>\n<p>使用与<code>react-router</code>类似，包括编程式跳转<code>router.push</code>以及组件式跳转<code>&#x3C;Link href=\"/about\">&#x3C;a>click me&#x3C;/a>&#x3C;/Link></code></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { useRouter } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'next/router'</span>;\n\n<span class=\"hljs-keyword\">const</span> router = useRouter();\nrouter.push({\n  <span class=\"hljs-attr\">pathname</span>: <span class=\"hljs-string\">'/activities/experience-lesson/course-info'</span>,\n  <span class=\"hljs-attr\">query</span>: { ...queryData, <span class=\"hljs-attr\">isFree</span>: <span class=\"hljs-number\">0</span> }\n});\nrouter.push(<span class=\"hljs-string\">'/about'</span>)</code></pre>\n<h3>渲染方式</h3>\n<h4>预渲染</h4>\n<ul>\n<li><strong>静态生成（Static Generation）</strong>（HTML重用、build生成）</li>\n<li><strong>服务器端渲染（Server-side Rendering）</strong>（每次请求生成的HTML不同、用户请求时生成）</li>\n</ul>\n<h4>相关API</h4>\n<ul>\n<li>\n<p>静态生成</p>\n<ul>\n<li><code>getStaticProps(context)</code></li>\n<li><code>getStaticPaths(context)</code></li>\n</ul>\n</li>\n<li>\n<p>服务器渲染</p>\n<ul>\n<li><code>getServerSideProps(context)</code></li>\n</ul>\n</li>\n<li>\n<p>客户端获取数据</p>\n<ul>\n<li>SWR（官方推荐）</li>\n</ul>\n</li>\n</ul>\n<p><strong>注意：</strong>在开发环境中<code>getStaticProps</code>和<code>getStaticPaths</code>每次请求都会被调用</p>\n<p>使用，在<strong>页面</strong>文件中导出</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Page</span>(<span class=\"hljs-params\">{ data }</span>) </span>{\n  <span class=\"hljs-comment\">// Render data...</span>\n}\n\n<span class=\"hljs-comment\">// This gets called on every request</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getServerSideProps</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">// Fetch data from external API</span>\n  <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">`https://.../data`</span>)\n  <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">await</span> res.json()\n\n  <span class=\"hljs-comment\">// Pass data to the page via props</span>\n  <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">props</span>: { data } }\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> Page</code></pre>\n<h2>项目结构</h2>\n<h3>配置Eslint+Prettier</h3>\n<blockquote>\n<p><a href=\"https://github.com/paulolramos/eslint-prettier-airbnb-react\">https://github.com/paulolramos/eslint-prettier-airbnb-react</a></p>\n<p><a href=\"https://dev.to/karlhadwen/setup-eslint-prettier-airbnb-style-guide-in-under-2-minutes-a27\">https://dev.to/karlhadwen/setup-eslint-prettier-airbnb-style-guide-in-under-2-minutes-a27</a></p>\n<p><a href=\"https://dev.to/bybruno/configuring-absolute-paths-in-react-for-web-without-ejecting-en-us-52h6\">https://dev.to/bybruno/configuring-absolute-paths-in-react-for-web-without-ejecting-en-us-52h6</a></p>\n</blockquote>\n<p>解决<code>eslint</code>无法识别动态引入语法<code>import()</code>:</p>\n<p><a href=\"https://github.com/eslint/eslint/issues/11486\">相关issue</a></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// eslint 配置</span>\n<span class=\"hljs-attr\">parserOptions</span>: {\n  <span class=\"hljs-attr\">ecmaVersion</span>: <span class=\"hljs-number\">2020</span>, <span class=\"hljs-comment\">// Use the latest ecmascript standard</span>\n  <span class=\"hljs-attr\">sourceType</span>: <span class=\"hljs-string\">'module'</span>, <span class=\"hljs-comment\">// Allows using import/export statements</span>\n  <span class=\"hljs-attr\">ecmaFeatures</span>: {\n  <span class=\"hljs-attr\">jsx</span>: <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">// Enable JSX since we're using React</span>\n  }\n},</code></pre>\n<h3>配置alias</h3>\n<p><code>next.config.js</code>配置</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">/* eslint-disable no-param-reassign */</span>\n<span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>);\n\n<span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-attr\">webpack</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">config</span>) =></span> {\n    <span class=\"hljs-comment\">// Note: we provide webpack above so you should not `require` it</span>\n    <span class=\"hljs-comment\">// Perform customizations to webpack config</span>\n    config.resolve.alias[<span class=\"hljs-string\">'@'</span>] = path.resolve(__dirname, <span class=\"hljs-string\">'./src'</span>);\n    <span class=\"hljs-comment\">// Important: return the modified config</span>\n    <span class=\"hljs-keyword\">return</span> config;\n  }\n};\n</code></pre>\n<p>eslint无法识别alias，需要在根目录下创建文件<code>jsconfig.json</code>并在<code>.eslintrc.js</code>\t配置<code>settings</code></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// .eslintrc.js</span>\n<span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-attr\">root</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// Make sure eslint picks up the config at the root of the directory</span>\n  <span class=\"hljs-attr\">extends</span>: [<span class=\"hljs-string\">'airbnb'</span>, <span class=\"hljs-string\">'airbnb/hooks'</span>, <span class=\"hljs-string\">'plugin:prettier/recommended'</span>, <span class=\"hljs-string\">'prettier/react'</span>],\n  <span class=\"hljs-attr\">env</span>: {\n    <span class=\"hljs-attr\">browser</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">commonjs</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">es6</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">jest</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">node</span>: <span class=\"hljs-literal\">true</span>\n  },\n  <span class=\"hljs-attr\">globals</span>: {\n    <span class=\"hljs-attr\">wx</span>: <span class=\"hljs-literal\">true</span>\n  },\n  <span class=\"hljs-attr\">parserOptions</span>: {\n    <span class=\"hljs-attr\">ecmaVersion</span>: <span class=\"hljs-number\">2020</span>, <span class=\"hljs-comment\">// Use the latest ecmascript standard</span>\n    <span class=\"hljs-attr\">sourceType</span>: <span class=\"hljs-string\">'module'</span>, <span class=\"hljs-comment\">// Allows using import/export statements</span>\n    <span class=\"hljs-attr\">ecmaFeatures</span>: {\n      <span class=\"hljs-attr\">jsx</span>: <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">// Enable JSX since we're using React</span>\n    }\n  },\n  <span class=\"hljs-attr\">rules</span>: {\n    <span class=\"hljs-string\">'react/react-in-jsx-scope'</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-string\">'jsx-a11y/alt-text'</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-comment\">// img alt</span>\n    <span class=\"hljs-string\">'react/prop-types'</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-string\">'jsx-a11y/click-events-have-key-events'</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-string\">'jsx-a11y/no-static-element-interactions'</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-string\">'dot-notation'</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-string\">'import/prefer-default-export'</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-string\">'react/jsx-props-no-spreading'</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-string\">'jsx-a11y/href-no-hash'</span>: [<span class=\"hljs-string\">'off'</span>],\n    <span class=\"hljs-string\">'react/no-array-index-key'</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-string\">'no-console'</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-string\">'no-alert'</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-string\">'consistent-return'</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-comment\">// eslint-disable-next-line prettier/prettier</span>\n    <span class=\"hljs-attr\">eqeqeq</span>: <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-string\">'react/self-closing-comp'</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-string\">'react-hooks/exhaustive-deps'</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-string\">'react/no-danger'</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-string\">'no-shadow'</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-string\">'jsx-a11y/label-has-associated-control'</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-string\">'react/jsx-filename-extension'</span>: [<span class=\"hljs-string\">'warn'</span>, { <span class=\"hljs-attr\">extensions</span>: [<span class=\"hljs-string\">'.js'</span>, <span class=\"hljs-string\">'.jsx'</span>] }],\n    <span class=\"hljs-string\">'max-len'</span>: [\n      <span class=\"hljs-string\">'warn'</span>,\n      {\n        <span class=\"hljs-attr\">code</span>: <span class=\"hljs-number\">120</span>,\n        <span class=\"hljs-attr\">tabWidth</span>: <span class=\"hljs-number\">2</span>,\n        <span class=\"hljs-attr\">comments</span>: <span class=\"hljs-number\">120</span>,\n        <span class=\"hljs-attr\">ignoreComments</span>: <span class=\"hljs-literal\">false</span>,\n        <span class=\"hljs-attr\">ignoreTrailingComments</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">ignoreUrls</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">ignoreStrings</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">ignoreTemplateLiterals</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">ignoreRegExpLiterals</span>: <span class=\"hljs-literal\">true</span>\n      }\n    ]\n  },\n  <span class=\"hljs-attr\">settings</span>: {\n    <span class=\"hljs-string\">'import/resolver'</span>: {\n      <span class=\"hljs-attr\">alias</span>: {\n        <span class=\"hljs-attr\">map</span>: [[<span class=\"hljs-string\">'@'</span>, <span class=\"hljs-string\">'./src'</span>]],\n        <span class=\"hljs-attr\">extensions</span>: [<span class=\"hljs-string\">'.ts'</span>, <span class=\"hljs-string\">'.js'</span>, <span class=\"hljs-string\">'.jsx'</span>, <span class=\"hljs-string\">'.json'</span>]\n      }\n    }\n  }\n};\n</code></pre>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"compilerOptions\"</span>: {\n    <span class=\"hljs-attr\">\"baseUrl\"</span>: <span class=\"hljs-string\">\"src\"</span>,\n    <span class=\"hljs-attr\">\"paths\"</span>: {\n      <span class=\"hljs-attr\">\"@/*\"</span>: [<span class=\"hljs-string\">\"./*\"</span>]\n    }\n  },\n  <span class=\"hljs-attr\">\"exclude\"</span>: [<span class=\"hljs-string\">\"node_modules\"</span>, <span class=\"hljs-string\">\"**/node_modules/*\"</span>]\n}</code></pre>\n<h3>封装axios在每次请求时显示<code>spin</code>组件</h3>\n<p>这里要注意一点，由于服务端不存在<code>document</code>，所以要判断一下当前所处的环境再去执行操作。</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'axios'</span>;\n<span class=\"hljs-keyword\">import</span> ReactDOM <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-dom'</span>;\n<span class=\"hljs-keyword\">import</span> Spin <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../components/Spin/Spin'</span>;\n\n<span class=\"hljs-keyword\">const</span> Axios = axios.create({\n  <span class=\"hljs-attr\">timeout</span>: <span class=\"hljs-number\">20000</span>\n});\n\n<span class=\"hljs-keyword\">const</span> csr = process.browser;\n\n<span class=\"hljs-comment\">// 当前正在请求的数量</span>\n<span class=\"hljs-keyword\">let</span> requestCount = <span class=\"hljs-number\">0</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">showLoading</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (requestCount === <span class=\"hljs-number\">0</span>) {\n    <span class=\"hljs-keyword\">var</span> dom = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'div'</span>);\n    dom.setAttribute(<span class=\"hljs-string\">'id'</span>, <span class=\"hljs-string\">'loading'</span>);\n    <span class=\"hljs-built_in\">document</span>.body.appendChild(dom);\n    ReactDOM.render(<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Spin</span> /></span></span>, dom);\n  }\n  requestCount++;\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'showLoading'</span>, requestCount);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">hideLoading</span>(<span class=\"hljs-params\"></span>) </span>{\n  requestCount--;\n  <span class=\"hljs-keyword\">if</span> (requestCount === <span class=\"hljs-number\">0</span>) {\n    <span class=\"hljs-built_in\">document</span>.body.removeChild(<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'loading'</span>));\n  }\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'hideLoading'</span>, requestCount);\n}\n\nAxios.interceptors.request.use(\n  <span class=\"hljs-function\">(<span class=\"hljs-params\">config</span>) =></span> {\n    csr &#x26;&#x26; showLoading();\n    <span class=\"hljs-keyword\">return</span> config;\n  },\n  <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =></span> {\n    csr &#x26;&#x26; hideLoading();\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.reject(err);\n  }\n);\n\nAxios.interceptors.response.use(\n  <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =></span> {\n    csr &#x26;&#x26; hideLoading();\n    <span class=\"hljs-keyword\">return</span> res;\n  },\n  <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =></span> {\n    csr &#x26;&#x26; hideLoading();\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.reject(err);\n  }\n);\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> Axios;\n</code></pre>\n<h3>自定义input hook</h3>\n<p>使用后可以免去给每个表单组件设置<code>onChange</code></p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n\n<span class=\"hljs-comment\">// 自定义input hook</span>\n<span class=\"hljs-comment\">// 参考资料：https://rangle.io/blog/simplifying-controlled-inputs-with-hooks/</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">useInput</span>(<span class=\"hljs-params\">initialValue</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> [value, setValue] = useState(initialValue);\n\n  <span class=\"hljs-keyword\">return</span> {\n    value,\n    setValue,\n    <span class=\"hljs-attr\">reset</span>: <span class=\"hljs-function\">() =></span> setValue(<span class=\"hljs-string\">''</span>),\n    <span class=\"hljs-attr\">bind</span>: {\n      value,\n      <span class=\"hljs-attr\">onChange</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =></span> {\n        setValue(e.target.value);\n      }\n    }\n  };\n}\n</code></pre>\n<p>使用：</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-comment\">// 没使用前</span>\n<span class=\"hljs-keyword\">const</span> [phone, setPhone] = useState(<span class=\"hljs-string\">''</span>);\n\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span>\n  <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"phone\"</span>\n  <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"number\"</span>\n  <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"请输入您的手机号码(必填)\"</span>\n  <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{</span>`${<span class=\"hljs-attr\">styles</span>['<span class=\"hljs-attr\">cell-content</span>']} ${<span class=\"hljs-attr\">styles</span>['<span class=\"hljs-attr\">cell-content-right</span>']}`}\n  <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{phone}</span>\n  <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{()</span> =></span> setPhone(e.target.value)}\n/></span>\n\n\n<span class=\"hljs-comment\">// 使用后</span>\n<span class=\"hljs-keyword\">const</span> { <span class=\"hljs-attr\">value</span>: phone, <span class=\"hljs-attr\">bind</span>: bindPhone } = useInput(<span class=\"hljs-string\">''</span>);\n\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span>\n  <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"phone\"</span>\n  <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"number\"</span>\n  <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"请输入您的手机号码(必填)\"</span>\n  <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{</span>`${<span class=\"hljs-attr\">styles</span>['<span class=\"hljs-attr\">cell-content</span>']} ${<span class=\"hljs-attr\">styles</span>['<span class=\"hljs-attr\">cell-content-right</span>']}`}\n  {<span class=\"hljs-attr\">...bindPhone</span>}\n/></span></span></code></pre>\n<h3>封装Dialog</h3>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">import</span> { createPortal } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-dom'</span>;\n<span class=\"hljs-keyword\">import</span> styles <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./Modal.module.css'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Modal</span>(<span class=\"hljs-params\">{ content, show, onOk }</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> modal = show &#x26;&#x26; (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{styles[</span>'<span class=\"hljs-attr\">overlay</span>']}></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{styles[</span>'<span class=\"hljs-attr\">modal</span>']}></span>\n        {/* 防止冒泡关闭窗口 */}\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{styles[</span>'<span class=\"hljs-attr\">wrapper</span>']} <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{(e)</span> =></span> e.stopPropagation()}>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{styles[</span>'<span class=\"hljs-attr\">content</span>']}></span>{content}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{styles[</span>'<span class=\"hljs-attr\">readed_btn</span>']} <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> onOk()}>\n            好 的\n          <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n\n  <span class=\"hljs-keyword\">const</span> ProtalContent = <span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-comment\">// 用来处理服务端不存在document的问题</span>\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-comment\">// 将modal挂在到body上</span>\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">document</span> &#x26;&#x26; createPortal(modal, <span class=\"hljs-built_in\">document</span>.body);\n    } <span class=\"hljs-keyword\">catch</span> (error) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n    }\n  };\n\n  <span class=\"hljs-comment\">// 动态引入组件</span>\n  <span class=\"hljs-comment\">// import dynamic from 'next/dynamic';</span>\n  <span class=\"hljs-comment\">// const Modal = dynamic(() => import('./components/Modal/Modal'), { ssr: false });</span>\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ProtalContent</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;/></span></span>\n  );\n}\n</code></pre>\n<h3>移动端适配</h3>\n<p>使用插件<code>postcss-px-to-viewport</code></p>\n<p>在根目录下新建文件<code>postcss.config.js</code></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-attr\">plugins</span>: {\n    <span class=\"hljs-string\">'postcss-px-to-viewport'</span>: {\n      <span class=\"hljs-comment\">// 视窗的宽度，对应的是我们设计稿的宽度，我们公司用的是375</span>\n      <span class=\"hljs-attr\">viewportWidth</span>: <span class=\"hljs-number\">375</span>,\n      <span class=\"hljs-comment\">// 视窗的高度，根据750设备的宽度来指定，一般指定1334，也可以不配置</span>\n      <span class=\"hljs-comment\">// viewportHeight: 1334,</span>\n      <span class=\"hljs-comment\">// 指定`px`转换为视窗单位值的小数位数</span>\n      <span class=\"hljs-attr\">unitPrecision</span>: <span class=\"hljs-number\">3</span>,\n      <span class=\"hljs-comment\">// 指定需要转换成的视窗单位，建议使用vw</span>\n      <span class=\"hljs-attr\">viewportUnit</span>: <span class=\"hljs-string\">'vw'</span>,\n      <span class=\"hljs-comment\">// 指定不转换为视窗单位的类，可以自定义，可以无限添加,建议定义一至两个通用的类名</span>\n      <span class=\"hljs-attr\">selectorBlackList</span>: [<span class=\"hljs-string\">'.ignore'</span>],\n      <span class=\"hljs-comment\">// 小于或等于`1px`不转换为视窗单位，你也可以设置为你想要的值</span>\n      <span class=\"hljs-attr\">minPixelValue</span>: <span class=\"hljs-number\">1</span>,\n      <span class=\"hljs-comment\">// 允许在媒体查询中转换`px`</span>\n      <span class=\"hljs-attr\">mediaQuery</span>: <span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-comment\">// exclude: undefined</span>\n    }\n  }\n};\n</code></pre>\n<h3>使用Docker+coding实现自动化部署</h3>\n<h4>dockerfile</h4>\n<pre><code class=\"hljs language-dockerfile\"><span class=\"hljs-comment\"># node版本号</span>\n<span class=\"hljs-keyword\">FROM</span> node:<span class=\"hljs-number\">12</span>-alpine\n\n<span class=\"hljs-comment\"># docker build时传进来的值 docker image build -t &#x3C;name> --build-arg API_ENV=development .</span>\n<span class=\"hljs-keyword\">ARG</span> API_ENV\n\n<span class=\"hljs-keyword\">RUN</span><span class=\"bash\"> <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${API_ENV}</span></span>\n\n<span class=\"hljs-keyword\">ENV</span> NEXT_PUBLIC_API_ENV=${API_ENV}\n\n<span class=\"hljs-comment\"># Create app directory</span>\n<span class=\"hljs-keyword\">RUN</span><span class=\"bash\"> mkdir -p /usr/src/app</span>\n<span class=\"hljs-keyword\">WORKDIR</span><span class=\"bash\"> /usr/src/app</span>\n\n<span class=\"hljs-comment\"># Install app dependencies</span>\n<span class=\"hljs-keyword\">COPY</span><span class=\"bash\"> package*.json /usr/src/app/</span>\n<span class=\"hljs-keyword\">RUN</span><span class=\"bash\"> npm install</span>\n\n<span class=\"hljs-comment\"># Bundle app source</span>\n<span class=\"hljs-keyword\">COPY</span><span class=\"bash\"> . /usr/src/app</span>\n\n<span class=\"hljs-keyword\">RUN</span><span class=\"bash\"> npm run build</span>\n<span class=\"hljs-keyword\">EXPOSE</span> <span class=\"hljs-number\">3000</span>\n\n<span class=\"hljs-keyword\">CMD</span><span class=\"bash\"> [ <span class=\"hljs-string\">\"npm\"</span>, <span class=\"hljs-string\">\"run\"</span>, <span class=\"hljs-string\">\"start\"</span> ]</span></code></pre>\n<p>在coding上设置代码push触发规则，触发生成制品库。</p>\n<h3>使用redux</h3>\n<blockquote>\n<p><a href=\"https://github.com/vercel/next.js/tree/canary/examples/with-redux\">https://github.com/vercel/next.js/tree/canary/examples/with-redux</a></p>\n<p><a href=\"https://github.com/vercel/next.js/tree/canary/examples/with-redux-thunk\">https://github.com/vercel/next.js/tree/canary/examples/with-redux-thunk</a></p>\n</blockquote>\n<p>里面有使用到一个js新特性<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator\">Nullish coalescing operator</a></p>\n<h2>Next.js 踩坑</h2>\n<h3>环境变量配置</h3>\n<p>环境变量在客户端无法获取，背景：由于我在项目中需要根据环境变量来使用不同环境的API域名。</p>\n<p>解决方案：官方提供了以<code>NEXT_PUBLIC_</code>开头的环境变量名，这样就可以在客户端和服务端都访问得到环境变量了。</p>\n","ogImage":{"url":"/assets/blog/preview/cover.jpg"},"coverImage":"/assets/blog/preview/cover.jpg"}},"__N_SSG":true}