<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>react博客-egg-jwt实现登录系统</title>
      <link href="/2020/05/13/react%E5%8D%9A%E5%AE%A2-egg-jwt%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E7%B3%BB%E7%BB%9F/"/>
      <url>/2020/05/13/react%E5%8D%9A%E5%AE%A2-egg-jwt%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p>react博客系列文章</p><a id="more"></a><h2 id="何为jwt"><a href="#何为jwt" class="headerlink" title="何为jwt"></a>何为jwt</h2><h2 id="egg-jwt"><a href="#egg-jwt" class="headerlink" title="egg-jwt"></a>egg-jwt</h2><h3 id="安装egg-jwt"><a href="#安装egg-jwt" class="headerlink" title="安装egg-jwt"></a>安装egg-jwt</h3><p><code>yarn add egg-jwt</code></p><h3 id="配置egg-jwt"><a href="#配置egg-jwt" class="headerlink" title="配置egg-jwt"></a>配置egg-jwt</h3><ol><li>配置<code>config/plugin.js</code>文件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">exports.jwt = &#123;</span><br><span class="line">  enable: <span class="literal">true</span>,</span><br><span class="line">  package: <span class="string">'egg-jwt'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>配置<code>config/config.default.js</code>文件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自己设定的密钥，用于对信息进行签名</span></span><br><span class="line">config.jwt = &#123;</span><br><span class="line">  secret: <span class="string">'xxxxxx'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="后台实现登录操作返回token"><a href="#后台实现登录操作返回token" class="headerlink" title="后台实现登录操作返回token"></a>后台实现登录操作返回token</h3><ol><li>路由层</li></ol><p>在第二个参数上加上jwt即可实现对该路由的鉴权 </p><p>下面的jwt是自定义的中间件<code>auth.js</code>，该文件在下一部分介绍</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Egg.Application&#125;</span> <span class="variable">app</span></span> - egg application</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; router, controller, middleware, config &#125; = app;</span><br><span class="line">  <span class="keyword">const</span> &#123; admin &#125; = controller.admin;</span><br><span class="line">  <span class="keyword">const</span> jwt = middleware.auth(config.jwt);</span><br><span class="line">  router.post(<span class="string">'/admin/login'</span>, admin.login);</span><br><span class="line">  <span class="comment">// 需要鉴权的路由再第二个参数上加上jwt</span></span><br><span class="line">  router.get(<span class="string">'/admin/get_type_list'</span>, jwt, admin.getTypeList);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>controller层</li></ol><p>使用<code>jwt.sign(加密数据, 密钥, [options, callback])</code> 来生成token</p><p>相关配置可以查看<a href="https://www.npmjs.com/package/jsonwebtoken" target="_blank" rel="noopener">jsonwebtoken</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> login() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; app, ctx &#125; = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">const</span> &#123; username, password &#125; = ctx.request.body;</span><br><span class="line">    <span class="keyword">const</span> checkValidate = <span class="keyword">await</span> ctx.service.admin.admin.checkUserValidate(username, password);</span><br><span class="line">    <span class="keyword">if</span> (checkValidate) &#123;</span><br><span class="line">        <span class="comment">// 将信息使用jwt进行签名加密生成token，expiresIn（token有效时间）</span></span><br><span class="line">        <span class="keyword">const</span> token = app.jwt.sign(&#123; username, password &#125;, app.config.jwt.secret, &#123; <span class="attr">expiresIn</span>: <span class="string">'2h'</span> &#125;);</span><br><span class="line">        ctx.body = &#123;</span><br><span class="line">            code: <span class="string">'0001'</span>,</span><br><span class="line">            msg: <span class="string">'登录成功'</span>,</span><br><span class="line">            token,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ctx.body = &#123;</span><br><span class="line">            code: <span class="string">'0002'</span>,</span><br><span class="line">            msg: <span class="string">'用户名或者密码错误，请重试！'</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>service层</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> checkUserValidate(username, password) &#123;</span><br><span class="line">  <span class="keyword">const</span> isValidate = <span class="keyword">await</span> <span class="keyword">this</span>.app.mysql.get(<span class="string">'admin'</span>, &#123; username, password &#125;);</span><br><span class="line">  <span class="keyword">return</span> !!isValidate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>使用postman进行测试</li></ol><p><img src="https://gitee.com/alannum3/MyImages/raw/master/img/image-20200502125430201.png" alt="image-20200502125430201"></p><p>将生成的token返回给前台后使用<code>localStorage.setItem</code>把<code>token</code>保存到本地</p><h3 id="前台传递token进行鉴权"><a href="#前台传递token进行鉴权" class="headerlink" title="前台传递token进行鉴权"></a>前台传递token进行鉴权</h3><h4 id="封装axios"><a href="#封装axios" class="headerlink" title="封装axios"></a>封装axios</h4><p>新建axios文件对axio进行封装，通过axios的拦截器来实现每次请求时自动在headers上携带token数据到后台，后台使用<code>jwt.verify</code>来检验token的正确性</p><p><em>axios.js</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 登录成功后保存在本地的token</span></span><br><span class="line">  <span class="keyword">const</span> token = localStorage.getItem(<span class="string">'token'</span>);</span><br><span class="line">  config.headers.Authorization = <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// code是后台接口设置的</span></span><br><span class="line">  <span class="keyword">const</span> &#123; code &#125; = response.data;</span><br><span class="line">  <span class="keyword">if</span> (code === <span class="string">'0003'</span> || code === <span class="string">'0004'</span>) &#123;</span><br><span class="line">    <span class="built_in">window</span>.location.href = <span class="string">'/login'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> response;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> axios;</span><br></pre></td></tr></table></figure><p>封装好后，之后都使用该封装好后的axios进行请求。</p><h4 id="后台校验处理"><a href="#后台校验处理" class="headerlink" title="后台校验处理"></a>后台校验处理</h4><p><em>auth.js</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">options</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">auth</span>(<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取前台通过axios封装后穿过来的token</span></span><br><span class="line">    <span class="keyword">const</span> token = ctx.header.authorization;</span><br><span class="line">    <span class="keyword">if</span> (token) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 验证并对token进行解码</span></span><br><span class="line">        <span class="keyword">const</span> decode = ctx.app.jwt.verify(token.split(<span class="string">' '</span>)[<span class="number">1</span>], options.secret);</span><br><span class="line">        <span class="built_in">console</span>.log(decode);</span><br><span class="line">        <span class="keyword">await</span> next();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(error.name);</span><br><span class="line">        <span class="keyword">if</span> (error.name === <span class="string">'JsonWebTokenError'</span> || error.name === <span class="string">'TokenExpiredError'</span>) &#123;</span><br><span class="line">          <span class="comment">// 这里的错误有许多种情况：1.token错误，2.token过期... 这里统一处理为鉴权失败</span></span><br><span class="line">          ctx.body = &#123;</span><br><span class="line">            code: <span class="string">'0003'</span>,</span><br><span class="line">            msg: <span class="string">'用户鉴权失败，请重新登录'</span>,</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">throw</span> error;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      ctx.body = &#123;</span><br><span class="line">        code: <span class="string">'0004'</span>,</span><br><span class="line">        msg: <span class="string">'您没有登录，请先登录'</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>后台通过<code>/middleware/auth.js</code>中间件来实现给需要鉴权的接口进行鉴权，通过对前台传过来的token数据进行验证<code>jwt.verify</code>来识别登录状态。对<code>JsonWebTokenError</code>错误统一处理，应为<code>auth.js</code>作为中间件，所以接口中出现的其他错误也会在这里被catch到，对于不是<code>JsonWebTokenError</code>的错误，直接把错误抛出去。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> React </tag>
            
            <tag> ReactHook </tag>
            
            <tag> jwt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react博客-项目部署</title>
      <link href="/2020/05/13/react%E5%8D%9A%E5%AE%A2-%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
      <url>/2020/05/13/react%E5%8D%9A%E5%AE%A2-%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<p>阿里云最近推出了一个“在家实践活动”，<strong>免费</strong>领取半年的服务器，真香。<a href="https://developer.aliyun.com/adc/student/" target="_blank" rel="noopener">领取地址</a></p><a id="more"></a><h2 id="购买阿里云服务器"><a href="#购买阿里云服务器" class="headerlink" title="购买阿里云服务器"></a>购买阿里云服务器</h2><p>购买完成后会得到一个<code>公网ip</code></p><p>下载软件<code>putty</code>来连接我们刚才购买的服务器，只需输入公网ip点击open即可</p><p>在命令行中输入用户名<code>root</code>和密码得到<code>Welcome to Alibaba Cloud Elastic Compute Service !</code>即完成了连接。</p><h2 id="使用宝塔进行管理"><a href="#使用宝塔进行管理" class="headerlink" title="使用宝塔进行管理"></a>使用宝塔进行管理</h2><p><a href="https://www.bt.cn/bbs/thread-19376-1-1.html" target="_blank" rel="noopener">https://www.bt.cn/bbs/thread-19376-1-1.html</a></p><p>连接成功服务器后在命令行输入(<strong>Centos</strong>系统，其他系统查看上面网址)，复制按下鼠标右键完成宝塔的安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http:&#x2F;&#x2F;download.bt.cn&#x2F;install&#x2F;install_6.0.sh &amp;&amp; sh install.sh</span><br></pre></td></tr></table></figure><p>安装成功后会返回一个端口号为8888的网站以及账号和密码：</p><p><img src="https://gitee.com/alannum3/MyImages/raw/master/img/image-20200507135712898.png" alt="image-20200507135712898"></p><p>访问该地址，这个时候网站时不能访问的，因为远程服务器没有开放8888端口。</p><p>设置教程：</p><p><a href="https://www.bt.cn/bbs/thread-2897-1-1.html" target="_blank" rel="noopener">https://www.bt.cn/bbs/thread-2897-1-1.html</a></p><p>登录成功后安装mysql和nginx（之后几乎所有的操作都在宝塔上进行）</p><h3 id="需要安装软件"><a href="#需要安装软件" class="headerlink" title="需要安装软件"></a>需要安装软件</h3><ul><li>php环境（用于phpmyadmin）</li><li>phpMyAdmin（用于管理mysql数据库）</li><li>PM2（自带node环境）</li><li>nginx</li></ul><h3 id="开放80-http-端口访问服务器"><a href="#开放80-http-端口访问服务器" class="headerlink" title="开放80(http)端口访问服务器"></a>开放80(http)端口访问服务器</h3><p>在阿里云服务器管理控制台安全组中设置</p><p>设置后就可以通过公网ip访问服务器了</p><h2 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h2><h3 id="切换镜像源"><a href="#切换镜像源" class="headerlink" title="切换镜像源"></a>切换镜像源</h3><p>安装nrm（用来管理npm镜像源的工具）<code>npm install -g nrm</code></p><p>常用命令</p><ul><li>nrm ls   查看所有源地址</li><li>nrm use taobao  切换为淘宝镜像源</li><li>nrm add [name] [url]  添加源地址</li></ul><h3 id="通过git克隆代码到服务器"><a href="#通过git克隆代码到服务器" class="headerlink" title="通过git克隆代码到服务器"></a>通过git克隆代码到服务器</h3><p>把代码clone到服务器</p><h3 id="打包项目并且部署"><a href="#打包项目并且部署" class="headerlink" title="打包项目并且部署"></a>打包项目并且部署</h3><ul><li>部署前台页面（next.js）</li></ul><p><code>yarn build</code></p><p><code>yarn start</code></p><p>或者用PM2进行进程守护（待研究）</p><ul><li>部署后台接口（egg.js）</li></ul><p><code>npm start</code></p><ul><li>部署后台管理系统</li></ul><p>直接<code>npm build</code>然后使用nginx进行代理</p><h3 id="导入mysql数据出错"><a href="#导入mysql数据出错" class="headerlink" title="导入mysql数据出错"></a>导入mysql数据出错</h3><p>在导入本地mysql文件时遇到了一些错误，参考文章：</p><blockquote><p><a href="https://www.jianshu.com/p/788dceb93eff" target="_blank" rel="noopener">https://www.jianshu.com/p/788dceb93eff</a></p></blockquote><h3 id="Linux查看端口号占用情况以及杀进程命令"><a href="#Linux查看端口号占用情况以及杀进程命令" class="headerlink" title="Linux查看端口号占用情况以及杀进程命令"></a>Linux查看端口号占用情况以及杀进程命令</h3><ul><li><p>netstart -anp（查看端口占用情况）</p></li><li><p>lsof -i:8080（查看8080端口占用情况）</p></li><li><p>kill -9 1234（杀PID=1234进程）</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 部署 </tag>
            
            <tag> React </tag>
            
            <tag> 阿里云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试主题</title>
      <link href="/2020/05/13/test1/"/>
      <url>/2020/05/13/test1/</url>
      
        <content type="html"><![CDATA[<p>这里是摘要</p><a id="more"></a><p>这里是正文</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">title: 测试主题</span><br><span class="line">date: 2020-05-13 09:19:17</span><br><span class="line">top: true</span><br><span class="line">categories: 测试分类</span><br><span class="line">tags: 测试标签</span><br><span class="line">author:</span><br><span class="line">name: 测试作者</span><br><span class="line">avatar: https:&#x2F;&#x2F;gitee.com&#x2F;alannum3&#x2F;MyImages&#x2F;raw&#x2F;master&#x2F;img&#x2F;20200508165134.png</span><br><span class="line">music:</span><br><span class="line"># 文章音乐</span><br><span class="line">  server: netease   # netease, tencent, kugou, xiami, baidu</span><br><span class="line">  type: song        # song, playlist, album, search, artist</span><br><span class="line">  id: 16846091 </span><br><span class="line">thumbnail:</span><br><span class="line"># 文章缩略图</span><br><span class="line">https:&#x2F;&#x2F;gitee.com&#x2F;alannum3&#x2F;MyImages&#x2F;raw&#x2F;master&#x2F;img&#x2F;20200508165134.png</span><br><span class="line"># 归档页面对应文章图标</span><br><span class="line">icons: [fas fa-fire red, fas fa-star green]</span><br><span class="line">meta:</span><br><span class="line"># 文章底部按钮</span><br><span class="line">  footer: [btns]</span><br><span class="line">btns:</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;xaoxuu&#x2F;hexo-theme-volantis</span><br><span class="line">  bug: https:&#x2F;&#x2F;github.com&#x2F;xaoxuu&#x2F;hexo-theme-volantis&#x2F;issues&#x2F;</span><br><span class="line">  doubt: https:&#x2F;&#x2F;github.com&#x2F;xaoxuu&#x2F;hexo-theme-volantis&#x2F;issues&#x2F;</span><br><span class="line">  idea: https:&#x2F;&#x2F;github.com&#x2F;xaoxuu&#x2F;hexo-theme-volantis&#x2F;issues&#x2F;</span><br><span class="line">cover: false #是否显示封面图</span><br></pre></td></tr></table></figure><h1 id="h1"><a href="#h1" class="headerlink" title="h1"></a>h1</h1><h2 id="h2"><a href="#h2" class="headerlink" title="h2"></a>h2</h2><h3 id="h3"><a href="#h3" class="headerlink" title="h3"></a>h3</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">代码块</span><br></pre></td></tr></table></figure><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><a href="#1-1">tab1</a></li><li class="tab"><a href="#1-2">tab2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="1-1"><p><img src="https://i.loli.net/2020/03/18/f5PQlWisvm9zbgK.jpg" alt=""></p></div><div class="tab-pane" id="1-2"><p>这里面写内容，支持的语法格式有限，请尽量<u>不要</u>写太过复杂的东西。</p></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 测试分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora+PicGo+Gitee（书写博客神器）</title>
      <link href="/2020/05/12/Typora-PicGo-Gitee%EF%BC%88%E4%B9%A6%E5%86%99%E5%8D%9A%E5%AE%A2%E7%A5%9E%E5%99%A8%EF%BC%89/"/>
      <url>/2020/05/12/Typora-PicGo-Gitee%EF%BC%88%E4%B9%A6%E5%86%99%E5%8D%9A%E5%AE%A2%E7%A5%9E%E5%99%A8%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>写博客，难免会随手截图来解释博客中的一些知识点或者内容。当高高兴兴地在本地电脑写完博客后将它上传之后发现所有图片都浏览不了了，这其实就是因为图片都保存在本地了。为了解决这个问题，从长远和财力来考虑，我使用了<code>gitee</code>搭配开源项目<code>PicGo</code>来做图床生成在线图片链接，这样无论在哪都能畅通查看图片了。而不使用<code>github</code>主要是国内访问速度是非常地慢。</p><a id="more"></a> <blockquote><p>参考文章：<a href="https://blog.csdn.net/disILLL/article/details/104944710" target="_blank" rel="noopener">https://blog.csdn.net/disILLL/article/details/104944710</a></p></blockquote><h2 id="开搞"><a href="#开搞" class="headerlink" title="开搞"></a>开搞</h2><h3 id="软件版本"><a href="#软件版本" class="headerlink" title="软件版本"></a>软件版本</h3><ul><li>typora 0.9.86</li><li>PicGo 2.2.2</li></ul><h3 id="创建gitee仓库"><a href="#创建gitee仓库" class="headerlink" title="创建gitee仓库"></a>创建gitee仓库</h3><p>在gitee账户中创建一个公开的仓库用来保存图片</p><h3 id="PicGo配置"><a href="#PicGo配置" class="headerlink" title="PicGo配置"></a>PicGo配置</h3><ol><li><p>安装<code>gitee-uploader</code>插件</p><p><img src="https://gitee.com/alannum3/MyImages/raw/master/img/image-20200505112347432.png" alt="image-20200505112347432"></p></li><li><p>安装完后配置gitee</p><p><img src="https://gitee.com/alannum3/MyImages/raw/master/img/image-20200505112433744.png" alt="image-20200505112433744"></p></li></ol><p><code>token</code>在自己的gitee中创建</p><p><img src="https://gitee.com/alannum3/MyImages/raw/master/img/image-20200505112543290.png" alt="image-20200505112543290"></p><p>点击commit生成<code>token</code>，将<code>token</code>填入PicGo中点击确定即可。</p><h3 id="配置Typora实现插入图片自动上传"><a href="#配置Typora实现插入图片自动上传" class="headerlink" title="配置Typora实现插入图片自动上传"></a>配置Typora实现插入图片自动上传</h3><p>新版本的Typora已经支持图片上传功能，具体配置如下（文件-&gt;偏好设置）：</p><p><img src="https://gitee.com/alannum3/MyImages/raw/master/img/image-20200505112000580.png" alt="image-20200505112000580"></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><img src="https://gitee.com/alannum3/MyImages/raw/master/img/test.gif" alt="test"><br>可以看到这里图片的链接是之前在<code>gitee</code>中创建的用来保存图片的<code>Repository</code>的地址了</p><p>哈哈，成功了，这样效率就提高了许多了。</p>]]></content>
      
      
      <categories>
          
          <category> 效率工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> 博客 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
